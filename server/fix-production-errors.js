// server/fix-production-errors.js
// ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ production errors

const prisma = require('./config/prisma');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ listBy function
async function fixListByIssues() {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ listBy function...');
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ database ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const carCount = await prisma.car.count();
        console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ ${carCount} ‡∏Ñ‡∏±‡∏ô`);
        
        if (carCount === 0) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ú‡πà‡∏≤‡∏ô admin panel');
            return;
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query patterns...');
        
        // Test 1: Basic car query
        const basicCars = await prisma.car.findMany({
            take: 5,
            include: { images: true }
        });
        console.log('‚úÖ Basic car query:', basicCars.length, 'cars');
        
        // Test 2: Car query with rentals
        const carsWithRentals = await prisma.car.findMany({
            take: 5,
            include: { 
                images: true,
                rentals: {
                    where: {
                        status: {
                            in: ['Pending', 'Active']
                        }
                    },
                    orderBy: { createdAt: 'desc' },
                    take: 1
                }
            }
        });
        console.log('‚úÖ Car query with rentals:', carsWithRentals.length, 'cars');
        
        // Test 3: Order by different fields
        const orderByTests = [
            { field: 'createdAt', order: 'desc' },
            { field: 'year', order: 'desc' },
            { field: 'pricePerDay', order: 'asc' }
        ];
        
        for (const test of orderByTests) {
            try {
                const result = await prisma.car.findMany({
                    take: 3,
                    orderBy: { [test.field]: test.order },
                    include: { images: true }
                });
                console.log(`‚úÖ Order by ${test.field} ${test.order}:`, result.length, 'cars');
            } catch (error) {
                console.error(`‚ùå Order by ${test.field} ${test.order} failed:`, error.message);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error in fixListByIssues:', error.message);
        console.error('Error details:', error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç database schema
async function checkDatabaseSchema() {
    console.log('\nüóÑÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database Schema...');
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables
        const tables = await prisma.$queryRaw`
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_SCHEMA = DATABASE()
        `;
        console.log('üìã Database tables:', tables);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Car table structure
        const carColumns = await prisma.$queryRaw`
            SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = 'Car' AND TABLE_SCHEMA = DATABASE()
        `;
        console.log('üöó Car table columns:', carColumns);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Image table structure
        const imageColumns = await prisma.$queryRaw`
            SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = 'Image' AND TABLE_SCHEMA = DATABASE()
        `;
        console.log('üñºÔ∏è Image table columns:', imageColumns);
        
    } catch (error) {
        console.error('‚ùå Database schema check failed:', error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function createTestData() {
    console.log('\nüß™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingCars = await prisma.car.count();
        
        if (existingCars > 0) {
            console.log(`‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ${existingCars} ‡∏Ñ‡∏±‡∏ô`);
            return;
        }
        
        console.log('üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const testCars = [
            {
                brand: 'Toyota',
                model: 'Camry',
                year: 2023,
                licensePlate: 'ABC-1234',
                pricePerDay: 1500,
                status: 'available'
            },
            {
                brand: 'Honda',
                model: 'Civic',
                year: 2022,
                licensePlate: 'DEF-5678',
                pricePerDay: 1200,
                status: 'available'
            },
            {
                brand: 'Nissan',
                model: 'Altima',
                year: 2023,
                licensePlate: 'GHI-9012',
                pricePerDay: 1300,
                status: 'available'
            }
        ];
        
        for (const carData of testCars) {
            const car = await prisma.car.create({
                data: carData
            });
            console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏ñ: ${car.brand} ${car.model} (ID: ${car.id})`);
        }
        
        console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        
    } catch (error) {
        console.error('‚ùå Error creating test data:', error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
async function fixProductionIssues() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Production...\n');
    
    await checkDatabaseSchema();
    await fixListByIssues();
    await createTestData();
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('üí° ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('   1. Environment variables ‡πÉ‡∏ô Railway dashboard');
    console.log('   2. Database connection string');
    console.log('   3. Railway deployment logs');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
if (require.main === module) {
    fixProductionIssues()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error('‚ùå Error:', error);
            process.exit(1);
        });
}

module.exports = { fixProductionIssues };
