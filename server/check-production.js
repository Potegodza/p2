// server/check-production.js
// ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö production environment

require('dotenv').config();

console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Production Environment...\n');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
console.log('üìã Environment Variables:');
console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
console.log('PORT:', process.env.PORT || 'undefined');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Set' : '‚ùå Missing');
console.log('JWT_SECRET:', process.env.JWT_SECRET ? '‚úÖ Set' : '‚ùå Missing');
console.log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? '‚úÖ Set' : '‚ùå Missing');
console.log('CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? '‚úÖ Set' : '‚ùå Missing');
console.log('CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? '‚úÖ Set' : '‚ùå Missing');
console.log('STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? '‚úÖ Set' : '‚ùå Missing');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database Connection
async function checkDatabase() {
    try {
        const prisma = require('./config/prisma');
        
        console.log('\nüóÑÔ∏è Database Connection Test:');
        
        // Test basic connection
        await prisma.$connect();
        console.log('‚úÖ Database connection successful');
        
        // Test car table
        const carCount = await prisma.car.count();
        console.log(`‚úÖ Car table accessible (${carCount} cars found)`);
        
        // Test car query with listBy parameters
        const testCars = await prisma.car.findMany({
            take: 5,
            orderBy: { createdAt: 'desc' },
            include: { 
                images: true,
                rentals: {
                    where: {
                        status: {
                            in: ['Pending', 'Active']
                        }
                    },
                    orderBy: { createdAt: 'desc' },
                    take: 1
                }
            }
        });
        console.log(`‚úÖ Car query with relations successful (${testCars.length} cars)`);
        
        await prisma.$disconnect();
        
    } catch (error) {
        console.error('‚ùå Database error:', error.message);
        console.error('Error details:', error);
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloudinary
async function checkCloudinary() {
    try {
        const cloudinary = require('cloudinary').v2;
        
        console.log('\n‚òÅÔ∏è Cloudinary Configuration Test:');
        
        cloudinary.config({
            cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
            api_key: process.env.CLOUDINARY_API_KEY,
            api_secret: process.env.CLOUDINARY_API_SECRET,
        });
        
        // Test cloudinary connection
        const result = await cloudinary.api.ping();
        console.log('‚úÖ Cloudinary connection successful');
        
    } catch (error) {
        console.error('‚ùå Cloudinary error:', error.message);
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API endpoints
async function checkAPIEndpoints() {
    const axios = require('axios');
    const baseURL = process.env.RAILWAY_PUBLIC_DOMAIN || 'http://localhost:5001';
    
    console.log('\nüåê API Endpoints Test:');
    console.log('Base URL:', baseURL);
    
    try {
        // Test health endpoint
        const healthResponse = await axios.get(`${baseURL}/api/health`);
        console.log('‚úÖ Health endpoint:', healthResponse.data);
        
        // Test cars endpoint
        const carsResponse = await axios.get(`${baseURL}/api/cars/5`);
        console.log('‚úÖ Cars endpoint:', carsResponse.data.length, 'cars found');
        
        // Test carby endpoint
        const carbyResponse = await axios.post(`${baseURL}/api/carby`, {
            sort: 'createdAt',
            order: 'desc',
            limit: 5
        });
        console.log('‚úÖ Carby endpoint:', carbyResponse.data.length, 'cars found');
        
    } catch (error) {
        console.error('‚ùå API error:', error.response?.data || error.message);
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function runChecks() {
    await checkDatabase();
    await checkCloudinary();
    await checkAPIEndpoints();
    
    console.log('\nüéØ Production Check Complete!');
    console.log('‡∏´‡∏≤‡∏Å‡∏°‡∏µ error ‡πÉ‡∏î‡πÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables ‡πÉ‡∏ô Railway dashboard');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
if (require.main === module) {
    runChecks();
}

module.exports = { runChecks };
